<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>

<groupId>nl.nadine.dierenasiel</groupId>
<artifactId>dieren-asiel</artifactId>
<version>1.0-SNAPSHOT</version>

<!--
We willen een .war file hebben
Al kun je de applicatie ook vanuit IntelliJ draaien.
-->
<packaging>war</packaging>

<properties>
    <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
    <maven-war-plugin.version>3.2.2</maven-war-plugin.version>
</properties>

<dependencies>
    <!--
    We hebben de Jakarta EE API nodig als dependency.
    De application server biedt de daadwerkelijke implementatie,
    maar als we de API niet beschikbaar hebben, dan kan de applicatie niet compileren!
    De scope is dan ook 'provided'. Dit houdt in dat we het alleen nodig hebben voor compileren,
    maar niet mee hoeven te packagen aangezien de runtime environment het zal leveren.
    De application server is hier deel van runtime environment.
    -->
    <!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jaxrs -->
<!--    <dependency>-->
<!--        <groupId>org.jboss.resteasy</groupId>-->
<!--        <artifactId>resteasy-jaxrs</artifactId>-->
<!--        <version>3.11.0.Final</version>-->
<!--        <scope>provided</scope>-->
<!--    </dependency>-->
    <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.3.15.Final</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>8.0.1</version>
        <scope>provided</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.jboss.weld.module/weld-ejb -->
<!--    <dependency>-->
<!--        <groupId>org.jboss.weld.module</groupId>-->
<!--        <artifactId>weld-ejb</artifactId>-->
<!--        <version>3.1.3.Final</version>-->
<!--    </dependency>-->
    <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.12</version>
        <scope>provided</scope>
    </dependency>
</dependencies>

<build>
    <plugins>
        <!--
        De Maven War plugin die standaard gebruikt wordt vereist een web.xml om succesvol te kunnen bouwen.
        Echter, tegenwoordig kunnen application servers ook war files zonder web.xml deployen.
        Dus we stellen de plugin hier zelf in en vertellen het dat hij niet hoeft te falen als er geen web.xml is.
        -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven-war-plugin.version}</version>
            <configuration>
                <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
        </plugin>

        <!--
        Bij default compileert Maven naar een oude versie van Java.
        Door deze compiler plugin zelf in te stellen op Java 8 kunnen we met moderne Java werken.
        -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>${maven-compiler-plugin.version}</version>
            <configuration>
                <source>8</source>
                <target>8</target>
            </configuration>
        </plugin>
    </plugins>
</build>

</project>
